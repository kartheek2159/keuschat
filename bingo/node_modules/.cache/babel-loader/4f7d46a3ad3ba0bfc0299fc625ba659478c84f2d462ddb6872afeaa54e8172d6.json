{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\keusu\\\\Documents\\\\test\\\\bingo\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from 'react';\n// import { connect } from 'nats.ws';\n\n// function App() {\n//   const [nc, setConnection] = useState(undefined);\n//   const [lastError, setLastError] = useState(\"\");\n//   // const addmsg=(err,msg)=>{\n//   //   console.log(msg.subject)\n//   // }\n//   useEffect(() => {\n//     if (nc === undefined) {\n//       const connectToNats = async () => {\n//         try {\n//           const natsConnection = await connect({\n//             servers: \"http://localhost:4222\"\n//           });\n//           setConnection(natsConnection);\n//           // nc.subscribe(\">\",{callback:addmsg})\n\n//         } catch (err) {\n//           setLastError(\"Error connecting\");\n//           console.error(err);\n//         }\n//       };\n\n//       connectToNats();\n//     }\n//   }, [nc]);\n\n//   const state = nc ? \"Connected\" : \"Not Connected\";\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Kartheek</h1>\n//       <h1>{state}</h1>\n//       <h3>{lastError ? lastError : \"\"}</h3>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport { useState, useEffect } from 'react';\nimport { StringCodec, connect } from 'nats.ws';\n\n// ... (other imports)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [nc, setConnection] = useState(undefined);\n  const [lastError, setLastError] = useState(\"\");\n  const [receivedMessages, setReceivedMessages] = useState([]);\n  const [sendMessage, setSendMessage] = useState(\"\");\n  const sc = StringCodec();\n  useEffect(() => {\n    if (nc === undefined) {\n      const connectToNats = async () => {\n        try {\n          const natsConnection = await connect({\n            servers: \"http://localhost:9090\"\n          });\n          setConnection(natsConnection);\n          const subscription = natsConnection.subscribe(\"trail\", (err, msg) => {\n            if (err) {\n              console.error(err);\n            } else {\n              const decodedMessage = sc.decode(msg.data);\n              setReceivedMessages(prevMessages => [...prevMessages, decodedMessage]);\n            }\n          });\n          return () => subscription.unsubscribe();\n        } catch (err) {\n          setLastError(\"Error connecting\");\n          console.error(err);\n        }\n      };\n      connectToNats();\n    }\n  }, [nc, sendMessage]);\n  const state = nc ? \"Connected\" : \"Not Connected\";\n  const handleSend = () => {\n    if (nc) {\n      const subject = \"trail\";\n      nc.publish(subject, sc.encode(sendMessage));\n    } else {\n      console.error(\"Not connected to NATS\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Kartheek\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: lastError ? lastError : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Received Messages:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: receivedMessages.map((message, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: sendMessage,\n      onChange: e => setSendMessage(e.target.value),\n      placeholder: \"Type your message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSend,\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"M2WkZzSHiI8/wHcqkLEOymKyVFA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","StringCodec","connect","jsxDEV","_jsxDEV","App","_s","nc","setConnection","undefined","lastError","setLastError","receivedMessages","setReceivedMessages","sendMessage","setSendMessage","sc","connectToNats","natsConnection","servers","subscription","subscribe","err","msg","console","error","decodedMessage","decode","data","prevMessages","unsubscribe","state","handleSend","subject","publish","encode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/keusu/Documents/test/bingo/src/App.js"],"sourcesContent":["// import { useState, useEffect } from 'react';\n// import { connect } from 'nats.ws';\n\n// function App() {\n//   const [nc, setConnection] = useState(undefined);\n//   const [lastError, setLastError] = useState(\"\");\n//   // const addmsg=(err,msg)=>{\n//   //   console.log(msg.subject)\n//   // }\n//   useEffect(() => {\n//     if (nc === undefined) {\n//       const connectToNats = async () => {\n//         try {\n//           const natsConnection = await connect({\n//             servers: \"http://localhost:4222\"\n//           });\n//           setConnection(natsConnection);\n//           // nc.subscribe(\">\",{callback:addmsg})\n          \n//         } catch (err) {\n//           setLastError(\"Error connecting\");\n//           console.error(err);\n//         }\n//       };\n\n//       connectToNats();\n//     }\n//   }, [nc]);\n\n//   const state = nc ? \"Connected\" : \"Not Connected\";\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Kartheek</h1>\n//       <h1>{state}</h1>\n//       <h3>{lastError ? lastError : \"\"}</h3>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\nimport { useState, useEffect } from 'react';\nimport { StringCodec, connect } from 'nats.ws';\n\n// ... (other imports)\n\nfunction App() {\n  const [nc, setConnection] = useState(undefined);\n  const [lastError, setLastError] = useState(\"\");\n  const [receivedMessages, setReceivedMessages] = useState([]);\n  const [sendMessage, setSendMessage] = useState(\"\");\n  const sc = StringCodec();\n\n  useEffect(() => {\n    if (nc === undefined) {\n      const connectToNats = async () => {\n        try {\n          const natsConnection = await connect({\n            servers: \"http://localhost:9090\"\n          });\n          setConnection(natsConnection);\n\n          const subscription = natsConnection.subscribe(\"trail\", (err, msg) => {\n            if (err) {\n              console.error(err);\n            } else {\n              const decodedMessage = sc.decode(msg.data);\n              setReceivedMessages((prevMessages) => [...prevMessages, decodedMessage]);\n            }\n          });\n\n          return () => subscription.unsubscribe();\n        } catch (err) {\n          setLastError(\"Error connecting\");\n          console.error(err);\n        }\n      };\n\n      connectToNats();\n    }\n  }, [nc,sendMessage]);\n\n  const state = nc ? \"Connected\" : \"Not Connected\";\n\n  const handleSend = () => {\n    if (nc) {\n      const subject = \"trail\";\n      nc.publish(subject, sc.encode(sendMessage));\n    } else {\n      console.error(\"Not connected to NATS\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Kartheek</h1>\n      <h1>{state}</h1>\n      <h3>{lastError ? lastError : \"\"}</h3>\n      <div>\n        <p>Received Messages:</p>\n        <ul>\n          {receivedMessages.map((message, index) => (\n            <li key={index}>{message}</li>\n          ))}\n        </ul>\n      </div>\n      <input\n        type=\"text\"\n        value={sendMessage}\n        onChange={(e) => setSendMessage(e.target.value)}\n        placeholder=\"Type your message\"\n      />\n      <button onClick={handleSend}>Send Message</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,EAAEC,OAAO,QAAQ,SAAS;;AAE9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,EAAE,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAACU,SAAS,CAAC;EAC/C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACa,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAMiB,EAAE,GAAGf,WAAW,CAAC,CAAC;EAExBD,SAAS,CAAC,MAAM;IACd,IAAIO,EAAE,KAAKE,SAAS,EAAE;MACpB,MAAMQ,aAAa,GAAG,MAAAA,CAAA,KAAY;QAChC,IAAI;UACF,MAAMC,cAAc,GAAG,MAAMhB,OAAO,CAAC;YACnCiB,OAAO,EAAE;UACX,CAAC,CAAC;UACFX,aAAa,CAACU,cAAc,CAAC;UAE7B,MAAME,YAAY,GAAGF,cAAc,CAACG,SAAS,CAAC,OAAO,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;YACnE,IAAID,GAAG,EAAE;cACPE,OAAO,CAACC,KAAK,CAACH,GAAG,CAAC;YACpB,CAAC,MAAM;cACL,MAAMI,cAAc,GAAGV,EAAE,CAACW,MAAM,CAACJ,GAAG,CAACK,IAAI,CAAC;cAC1Cf,mBAAmB,CAAEgB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEH,cAAc,CAAC,CAAC;YAC1E;UACF,CAAC,CAAC;UAEF,OAAO,MAAMN,YAAY,CAACU,WAAW,CAAC,CAAC;QACzC,CAAC,CAAC,OAAOR,GAAG,EAAE;UACZX,YAAY,CAAC,kBAAkB,CAAC;UAChCa,OAAO,CAACC,KAAK,CAACH,GAAG,CAAC;QACpB;MACF,CAAC;MAEDL,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACV,EAAE,EAACO,WAAW,CAAC,CAAC;EAEpB,MAAMiB,KAAK,GAAGxB,EAAE,GAAG,WAAW,GAAG,eAAe;EAEhD,MAAMyB,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIzB,EAAE,EAAE;MACN,MAAM0B,OAAO,GAAG,OAAO;MACvB1B,EAAE,CAAC2B,OAAO,CAACD,OAAO,EAAEjB,EAAE,CAACmB,MAAM,CAACrB,WAAW,CAAC,CAAC;IAC7C,CAAC,MAAM;MACLU,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAC;IACxC;EACF,CAAC;EAED,oBACErB,OAAA;IAAKgC,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBjC,OAAA;MAAAiC,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBrC,OAAA;MAAAiC,QAAA,EAAKN;IAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChBrC,OAAA;MAAAiC,QAAA,EAAK3B,SAAS,GAAGA,SAAS,GAAG;IAAE;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACrCrC,OAAA;MAAAiC,QAAA,gBACEjC,OAAA;QAAAiC,QAAA,EAAG;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACzBrC,OAAA;QAAAiC,QAAA,EACGzB,gBAAgB,CAAC8B,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBACnCxC,OAAA;UAAAiC,QAAA,EAAiBM;QAAO,GAAfC,KAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAC9B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACNrC,OAAA;MACEyC,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEhC,WAAY;MACnBiC,QAAQ,EAAGC,CAAC,IAAKjC,cAAc,CAACiC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAChDI,WAAW,EAAC;IAAmB;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eACFrC,OAAA;MAAQ+C,OAAO,EAAEnB,UAAW;MAAAK,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEV;AAACnC,EAAA,CArEQD,GAAG;AAAA+C,EAAA,GAAH/C,GAAG;AAuEZ,eAAeA,GAAG;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}