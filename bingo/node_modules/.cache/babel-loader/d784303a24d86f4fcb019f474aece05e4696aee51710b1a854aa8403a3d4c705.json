{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\keusu\\\\Documents\\\\test\\\\bingo\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatApp = () => {\n  _s();\n  var _messagesData$selecte;\n  const [usersData, setUsersData] = useState([]);\n  const [ud, setud] = useState(null);\n  const [selectedUserId, setSelectedUserId] = useState(null);\n  const [messagesData, setMessagesData] = useState({});\n  const [newMessage, setNewMessage] = useState('');\n  const navigate = useNavigate();\n  const hardcodedUsers = [{\n    id: 1,\n    name: 'John'\n  }, {\n    id: 2,\n    name: 'Alice'\n  }, {\n    id: 3,\n    name: 'Bob'\n  }];\n  const hardcodedMessages = {\n    1: [{\n      id: 1,\n      text: 'Hi, how are you?'\n    }, {\n      id: 2,\n      text: \"I'm good, thanks!\"\n    }],\n    2: [{\n      id: 1,\n      text: 'Hello there!'\n    }, {\n      id: 2,\n      text: \"How's it going?\"\n    }],\n    3: [{\n      id: 1,\n      text: 'Hey!'\n    }, {\n      id: 2,\n      text: \"I'm doing well, thanks.\"\n    }]\n  };\n  useEffect(() => {\n    setUsersData(hardcodedUsers);\n    setMessagesData(hardcodedMessages);\n    const sud = localStorage.getItem('userData');\n    if (sud) {\n      const parseud = JSON.parse(sud);\n      setud(parseud);\n      console.log(parseud['user']['email']);\n    } else {\n      navigate('/login');\n    }\n  }, []);\n  const handleUserClick = userId => {\n    setSelectedUserId(userId);\n  };\n  const handleSendMessage = () => {\n    if (newMessage.trim() === '') {\n      return; // Don't send empty messages\n    }\n    const updatedMessages = {\n      ...messagesData\n    };\n    const newMessageObject = {\n      id: Date.now(),\n      // Using timestamp as a unique ID for simplicity\n      text: newMessage\n    };\n    if (selectedUserId in updatedMessages) {\n      updatedMessages[selectedUserId] = [...updatedMessages[selectedUserId], newMessageObject];\n    } else {\n      updatedMessages[selectedUserId] = [newMessageObject];\n    }\n    setMessagesData(updatedMessages);\n    setNewMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"User List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Current user name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: usersData.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleUserClick(user.id),\n          children: user.name\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), selectedUserId ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          children: (_messagesData$selecte = messagesData[selectedUserId]) === null || _messagesData$selecte === void 0 ? void 0 : _messagesData$selecte.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: message.text\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newMessage,\n          onChange: e => setNewMessage(e.target.value),\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select a user to view messages.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatApp, \"8ZP8qrDgBxw3JFZmmc/giy4HYJ0=\", false, function () {\n  return [useNavigate];\n});\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","ChatApp","_s","_messagesData$selecte","usersData","setUsersData","ud","setud","selectedUserId","setSelectedUserId","messagesData","setMessagesData","newMessage","setNewMessage","navigate","hardcodedUsers","id","name","hardcodedMessages","text","sud","localStorage","getItem","parseud","JSON","parse","console","log","handleUserClick","userId","handleSendMessage","trim","updatedMessages","newMessageObject","Date","now","children","fileName","_jsxFileName","lineNumber","columnNumber","map","user","onClick","message","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/keusu/Documents/test/bingo/src/components/Chat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst ChatApp = () => {\r\n  const [usersData, setUsersData] = useState([]);\r\n  const [ud,setud]=useState(null)\r\n  const [selectedUserId, setSelectedUserId] = useState(null);\r\n  const [messagesData, setMessagesData] = useState({});\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const navigate=useNavigate()\r\n  const hardcodedUsers = [\r\n    { id: 1, name: 'John' },\r\n    { id: 2, name: 'Alice' },\r\n    { id: 3, name: 'Bob' },\r\n  ];\r\n\r\n  const hardcodedMessages = {\r\n    1: [\r\n      { id: 1, text: 'Hi, how are you?' },\r\n      { id: 2, text: \"I'm good, thanks!\" },\r\n    ],\r\n    2: [\r\n      { id: 1, text: 'Hello there!' },\r\n      { id: 2, text: \"How's it going?\" },\r\n    ],\r\n    3: [\r\n      { id: 1, text: 'Hey!' },\r\n      { id: 2, text: \"I'm doing well, thanks.\" },\r\n    ],\r\n  };\r\n\r\n  useEffect(() => {\r\n    setUsersData(hardcodedUsers);\r\n    setMessagesData(hardcodedMessages);\r\n    const sud=localStorage.getItem('userData')\r\n    if(sud){\r\n      const parseud=JSON.parse(sud)\r\n      setud(parseud);\r\n      console.log(parseud['user']['email'])\r\n    }\r\n    else{\r\n      navigate('/login')\r\n    }\r\n  },[]);\r\n\r\n  const handleUserClick = (userId) => {\r\n    setSelectedUserId(userId);\r\n  };\r\n\r\n  const handleSendMessage = () => {\r\n    if (newMessage.trim() === '') {\r\n      return; // Don't send empty messages\r\n    }\r\n\r\n    const updatedMessages = { ...messagesData };\r\n    const newMessageObject = {\r\n      id: Date.now(), // Using timestamp as a unique ID for simplicity\r\n      text: newMessage,\r\n    };\r\n\r\n    if (selectedUserId in updatedMessages) {\r\n      updatedMessages[selectedUserId] = [\r\n        ...updatedMessages[selectedUserId],\r\n        newMessageObject,\r\n      ];\r\n    } else {\r\n      updatedMessages[selectedUserId] = [newMessageObject];\r\n    }\r\n\r\n    setMessagesData(updatedMessages);\r\n    setNewMessage('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h2>User List</h2>\r\n        <h2>Current user name</h2>\r\n        <ul>\r\n          {usersData.map((user) => (\r\n            <li key={user.id} onClick={() => handleUserClick(user.id)}>\r\n              {user.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      <div>\r\n        <h2>Messages</h2>\r\n        {selectedUserId ? (\r\n          <div>\r\n            <ul>\r\n              {messagesData[selectedUserId]?.map((message) => (\r\n                <li key={message.id}>{message.text}</li>\r\n              ))}\r\n            </ul>\r\n            <input\r\n              type=\"text\"\r\n              value={newMessage}\r\n              onChange={(e) => setNewMessage(e.target.value)}\r\n              placeholder=\"Type your message...\"\r\n            />\r\n            <button onClick={handleSendMessage}>Send</button>\r\n          </div>\r\n        ) : (\r\n          <p>Select a user to view messages.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatApp;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}