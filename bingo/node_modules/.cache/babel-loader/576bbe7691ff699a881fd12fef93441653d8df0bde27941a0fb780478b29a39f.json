{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\keusu\\\\Documents\\\\test\\\\bingo\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { StringCodec, connect } from 'nats.ws';\nimport { startNatsConnection } from '../../nats/natsconnection.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [nc, setConnection] = useState(startNatsConnection);\n  const [lastError, setLastError] = useState(\"\");\n  const [receivedMessages, setReceivedMessages] = useState([]);\n  const [sendMessage, setSendMessage] = useState(\"\");\n  const sc = StringCodec();\n  useEffect(() => {\n    if (nc === undefined) {\n      const connectToNats = async () => {\n        try {\n          // const natsConnection = await connect({\n          //   servers: \"http://localhost:9090\",\n          //   headers: {\n          //     \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n          //     \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n          //     \"Access-Control-Allow-Headers\": \"Origin, X-Requested-With, Content-Type, Accept\",\n          //   },\n          // });\n          // setConnection(natsConnection);\n\n          const subscription = nc.subscribe(\"trail\", {\n            callback: (err, msg) => {\n              if (err) {\n                console.error(err);\n              } else {\n                const message = sc.decode(msg.data);\n                console.log(\"Received message:\", message);\n                setReceivedMessages(prevMessages => [...prevMessages, message]);\n              }\n            }\n          });\n          console.log(subscription);\n          return () => subscription.unsubscribe();\n        } catch (err) {\n          setLastError(\"Error connecting\");\n          console.error(err);\n        }\n      };\n      connectToNats();\n    }\n  }, [nc]);\n  useEffect(() => {\n    if (nc) {\n      const state = nc ? \"Connected\" : \"Not Connected\";\n      console.log(state);\n    }\n  }, [nc]);\n  const handleSend = () => {\n    if (nc) {\n      const subject = \"trail\";\n      nc.publish(subject, sc.encode(sendMessage));\n      console.log(sendMessage);\n    } else {\n      console.error(\"Not connected to NATS\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Kartheek\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: nc ? \"Connected\" : \"Not Connected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: lastError ? lastError : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), receivedMessages.map((message, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Received Message: \", message]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: sendMessage,\n      onChange: e => setSendMessage(e.target.value),\n      placeholder: \"Type your message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSend,\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dVXYPf+ubE69khY0/830KUFweQ0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","StringCodec","connect","startNatsConnection","jsxDEV","_jsxDEV","App","_s","nc","setConnection","lastError","setLastError","receivedMessages","setReceivedMessages","sendMessage","setSendMessage","sc","undefined","connectToNats","subscription","subscribe","callback","err","msg","console","error","message","decode","data","log","prevMessages","unsubscribe","state","handleSend","subject","publish","encode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/keusu/Documents/test/bingo/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { StringCodec, connect } from 'nats.ws';\nimport {startNatsConnection} from '../../nats/natsconnection.js';\n\nfunction App() {\n  const [nc, setConnection] = useState(startNatsConnection);\n  const [lastError, setLastError] = useState(\"\");\n  const [receivedMessages, setReceivedMessages] = useState([]);\n  const [sendMessage, setSendMessage] = useState(\"\");\n  const sc = StringCodec();\n\n  useEffect(() => {\n    if (nc === undefined) {\n      const connectToNats = async () => {\n        try {\n          // const natsConnection = await connect({\n          //   servers: \"http://localhost:9090\",\n          //   headers: {\n          //     \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n          //     \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n          //     \"Access-Control-Allow-Headers\": \"Origin, X-Requested-With, Content-Type, Accept\",\n          //   },\n          // });\n          // setConnection(natsConnection);\n\n          const subscription = nc.subscribe(\"trail\", {\n            callback: (err, msg) => {\n              if (err) {\n                console.error(err);\n              } else {\n                const message = sc.decode(msg.data);\n                console.log(\"Received message:\", message);\n                setReceivedMessages((prevMessages) => [...prevMessages, message]);\n              }\n            },\n          });\n          console.log(subscription);\n\n          return () => subscription.unsubscribe();\n        } catch (err) {\n          setLastError(\"Error connecting\");\n          console.error(err);\n        }\n      };\n\n      connectToNats();\n    }\n  }, [nc]);\n\n  useEffect(() => {\n    if (nc) {\n      const state = nc ? \"Connected\" : \"Not Connected\";\n      console.log(state);\n    }\n  }, [nc]);\n\n  const handleSend = () => {\n    if (nc) {\n      const subject = \"trail\";\n      nc.publish(subject, sc.encode(sendMessage));\n      console.log(sendMessage);\n    } else {\n      console.error(\"Not connected to NATS\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Kartheek</h1>\n      <h1>{nc ? \"Connected\" : \"Not Connected\"}</h1>\n      <h3>{lastError ? lastError : \"\"}</h3>\n      {/* Display all received messages */}\n      {receivedMessages.map((message, index) => (\n        <p key={index}>Received Message: {message}</p>\n      ))}\n      <input\n        type=\"text\"\n        value={sendMessage}\n        onChange={(e) => setSendMessage(e.target.value)}\n        placeholder=\"Type your message\"\n      />\n      <button onClick={handleSend}>Send Message</button>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,EAAEC,OAAO,QAAQ,SAAS;AAC9C,SAAQC,mBAAmB,QAAO,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjE,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,EAAE,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAACI,mBAAmB,CAAC;EACzD,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACa,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAMiB,EAAE,GAAGf,WAAW,CAAC,CAAC;EAExBD,SAAS,CAAC,MAAM;IACd,IAAIQ,EAAE,KAAKS,SAAS,EAAE;MACpB,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;QAChC,IAAI;UACF;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA,MAAMC,YAAY,GAAGX,EAAE,CAACY,SAAS,CAAC,OAAO,EAAE;YACzCC,QAAQ,EAAEA,CAACC,GAAG,EAAEC,GAAG,KAAK;cACtB,IAAID,GAAG,EAAE;gBACPE,OAAO,CAACC,KAAK,CAACH,GAAG,CAAC;cACpB,CAAC,MAAM;gBACL,MAAMI,OAAO,GAAGV,EAAE,CAACW,MAAM,CAACJ,GAAG,CAACK,IAAI,CAAC;gBACnCJ,OAAO,CAACK,GAAG,CAAC,mBAAmB,EAAEH,OAAO,CAAC;gBACzCb,mBAAmB,CAAEiB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEJ,OAAO,CAAC,CAAC;cACnE;YACF;UACF,CAAC,CAAC;UACFF,OAAO,CAACK,GAAG,CAACV,YAAY,CAAC;UAEzB,OAAO,MAAMA,YAAY,CAACY,WAAW,CAAC,CAAC;QACzC,CAAC,CAAC,OAAOT,GAAG,EAAE;UACZX,YAAY,CAAC,kBAAkB,CAAC;UAChCa,OAAO,CAACC,KAAK,CAACH,GAAG,CAAC;QACpB;MACF,CAAC;MAEDJ,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACV,EAAE,CAAC,CAAC;EAERR,SAAS,CAAC,MAAM;IACd,IAAIQ,EAAE,EAAE;MACN,MAAMwB,KAAK,GAAGxB,EAAE,GAAG,WAAW,GAAG,eAAe;MAChDgB,OAAO,CAACK,GAAG,CAACG,KAAK,CAAC;IACpB;EACF,CAAC,EAAE,CAACxB,EAAE,CAAC,CAAC;EAER,MAAMyB,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIzB,EAAE,EAAE;MACN,MAAM0B,OAAO,GAAG,OAAO;MACvB1B,EAAE,CAAC2B,OAAO,CAACD,OAAO,EAAElB,EAAE,CAACoB,MAAM,CAACtB,WAAW,CAAC,CAAC;MAC3CU,OAAO,CAACK,GAAG,CAACf,WAAW,CAAC;IAC1B,CAAC,MAAM;MACLU,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAC;IACxC;EACF,CAAC;EAED,oBACEpB,OAAA;IAAKgC,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBjC,OAAA;MAAAiC,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBrC,OAAA;MAAAiC,QAAA,EAAK9B,EAAE,GAAG,WAAW,GAAG;IAAe;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC7CrC,OAAA;MAAAiC,QAAA,EAAK5B,SAAS,GAAGA,SAAS,GAAG;IAAE;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAEpC9B,gBAAgB,CAAC+B,GAAG,CAAC,CAACjB,OAAO,EAAEkB,KAAK,kBACnCvC,OAAA;MAAAiC,QAAA,GAAe,oBAAkB,EAACZ,OAAO;IAAA,GAAjCkB,KAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAgC,CAC9C,CAAC,eACFrC,OAAA;MACEwC,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEhC,WAAY;MACnBiC,QAAQ,EAAGC,CAAC,IAAKjC,cAAc,CAACiC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAChDI,WAAW,EAAC;IAAmB;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eACFrC,OAAA;MAAQ8C,OAAO,EAAElB,UAAW;MAAAK,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEV;AAACnC,EAAA,CAhFQD,GAAG;AAAA8C,EAAA,GAAH9C,GAAG;AAkFZ,eAAeA,GAAG;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}