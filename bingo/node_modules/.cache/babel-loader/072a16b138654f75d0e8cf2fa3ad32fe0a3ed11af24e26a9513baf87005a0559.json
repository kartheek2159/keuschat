{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\keusu\\\\Documents\\\\test\\\\bingo\\\\src\\\\components\\\\chatapp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'nats.ws';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatApp = () => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [message, setMessage] = useState('');\n  const [chat, setChat] = useState([]);\n  let natsClient = null;\n  useEffect(() => {\n    const initializeNats = async () => {\n      // Only initialize the connection and subscription if not already established\n      if (!natsClient) {\n        natsClient = await connect({\n          servers: 'http://localhost:9090',\n          payload: 'json'\n        });\n        const subscription = natsClient.subscribe('chat', msg => {\n          const newMessage = msg.data;\n          console.log('Received message:', newMessage);\n          setChat(prevChat => [...prevChat, newMessage]);\n        });\n        console.log('Subscription established:', subscription);\n      }\n    };\n    initializeNats();\n\n    // Cleanup function\n    return () => {\n      // Close the connection when the component unmounts\n      if (natsClient) {\n        natsClient.close();\n      }\n    };\n  }, [natsClient]); // Add natsClient as a dependency\n  // Empty dependency array ensures this effect runs only once on mount\n\n  const sendMessage = async () => {\n    if (username && message && natsClient) {\n      // Reuse the existing connection (natsClient) instead of creating a new one\n      natsClient.publish('chat', JSON.stringify({\n        username,\n        message\n      }));\n      setMessage('');\n    } else {\n      console.error('NATS client is not yet initialized.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your username\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Type your message...\",\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: chat.map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: msg.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this), \": \", msg.message]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatApp, \"zrBjF1ZE3kTHAr5SUfBP0NGVxt4=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","useEffect","connect","jsxDEV","_jsxDEV","ChatApp","_s","username","setUsername","message","setMessage","chat","setChat","natsClient","initializeNats","servers","payload","subscription","subscribe","msg","newMessage","data","console","log","prevChat","close","sendMessage","publish","JSON","stringify","error","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","_c","$RefreshReg$"],"sources":["C:/Users/keusu/Documents/test/bingo/src/components/chatapp.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'nats.ws';\r\n\r\nconst ChatApp = () => {\r\n  const [username, setUsername] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [chat, setChat] = useState([]);\r\n  let natsClient = null;\r\n\r\n  useEffect(() => {\r\n    const initializeNats = async () => {\r\n      // Only initialize the connection and subscription if not already established\r\n      if (!natsClient) {\r\n        natsClient = await connect({\r\n          servers: 'http://localhost:9090',\r\n          payload: 'json',\r\n        });\r\n  \r\n        const subscription = natsClient.subscribe('chat', (msg) => {\r\n          const newMessage = msg.data;\r\n          console.log('Received message:', newMessage);\r\n          setChat((prevChat) => [...prevChat, newMessage]);\r\n        });\r\n  \r\n        console.log('Subscription established:', subscription);\r\n      }\r\n    };\r\n  \r\n    initializeNats();\r\n  \r\n    // Cleanup function\r\n    return () => {\r\n      // Close the connection when the component unmounts\r\n      if (natsClient) {\r\n        natsClient.close();\r\n      }\r\n    };\r\n  }, [natsClient]); // Add natsClient as a dependency\r\n   // Empty dependency array ensures this effect runs only once on mount\r\n  \r\n\r\n   const sendMessage = async () => {\r\n    if (username && message && natsClient) {\r\n      // Reuse the existing connection (natsClient) instead of creating a new one\r\n      natsClient.publish('chat', JSON.stringify({ username, message }));\r\n      setMessage('');\r\n    } else {\r\n      console.error('NATS client is not yet initialized.');\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter your username\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n        />\r\n      </div>\r\n      <div>\r\n        <textarea\r\n          placeholder=\"Type your message...\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n        />\r\n      </div>\r\n      <button onClick={sendMessage}>Send</button>\r\n      <div>\r\n        <h2>Chat</h2>\r\n        <ul>\r\n          {chat.map((msg, index) => (\r\n            <li key={index}>\r\n              <strong>{msg.username}</strong>: {msg.message}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatApp;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}