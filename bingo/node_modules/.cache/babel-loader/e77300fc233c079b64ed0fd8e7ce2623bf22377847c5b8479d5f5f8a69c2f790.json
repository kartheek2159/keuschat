{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\keusu\\\\Documents\\\\test\\\\bingo\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatApp = () => {\n  _s();\n  var _messagesData$selecte;\n  const [usersData, setUsersData] = useState([]);\n  const [ud, setUd] = useState(null);\n  const [selectedUserId, setSelectedUserId] = useState(null);\n  const [messagesData, setMessagesData] = useState({});\n  const [newMessage, setNewMessage] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    const sud = localStorage.getItem('userData');\n    if (sud) {\n      const parseud = JSON.parse(sud);\n      setUd(parseud);\n      console.log(parseud['user']['email']);\n    } else {\n      navigate('/login');\n    }\n\n    // Fetch users data from the API\n    axios.get('http://localhost:7000/users').then(response => {\n      setUsersData(response.data);\n    }).catch(error => {\n      console.error('Error fetching users:', error);\n    });\n\n    // Set other initial data\n    const hardcodedMessages = {\n      1: [{\n        id: 1,\n        text: 'Hi, how are you?'\n      }, {\n        id: 2,\n        text: \"I'm good, thanks!\"\n      }],\n      2: [{\n        id: 1,\n        text: 'Hello there!'\n      }, {\n        id: 2,\n        text: \"How's it going?\"\n      }],\n      3: [{\n        id: 1,\n        text: 'Hey!'\n      }, {\n        id: 2,\n        text: \"I'm doing well, thanks.\"\n      }]\n    };\n    setMessagesData(hardcodedMessages);\n  }, [navigate]);\n  const handleUserClick = userId => {\n    setSelectedUserId(userId);\n  };\n  const handleSendMessage = () => {\n    if (newMessage.trim() === '') {\n      return; // Don't send empty messages\n    }\n    const updatedMessages = {\n      ...messagesData\n    };\n    const newMessageObject = {\n      id: Date.now(),\n      // Using timestamp as a unique ID for simplicity\n      text: newMessage\n    };\n    if (selectedUserId in updatedMessages) {\n      updatedMessages[selectedUserId] = [...updatedMessages[selectedUserId], newMessageObject];\n    } else {\n      updatedMessages[selectedUserId] = [newMessageObject];\n    }\n    setMessagesData(updatedMessages);\n    setNewMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"User List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Current user name \", ud ? ud['user']['username'] : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: usersData.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleUserClick(user._id),\n          children: user.username\n        }, user._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), selectedUserId ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          children: (_messagesData$selecte = messagesData[selectedUserId]) === null || _messagesData$selecte === void 0 ? void 0 : _messagesData$selecte.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: message.text\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newMessage,\n          onChange: e => setNewMessage(e.target.value),\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select a user to view messages.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatApp, \"kwSeAikiJXmjgra5eETRUwkZrzE=\", false, function () {\n  return [useNavigate];\n});\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","jsxDEV","_jsxDEV","ChatApp","_s","_messagesData$selecte","usersData","setUsersData","ud","setUd","selectedUserId","setSelectedUserId","messagesData","setMessagesData","newMessage","setNewMessage","navigate","sud","localStorage","getItem","parseud","JSON","parse","console","log","get","then","response","data","catch","error","hardcodedMessages","id","text","handleUserClick","userId","handleSendMessage","trim","updatedMessages","newMessageObject","Date","now","children","fileName","_jsxFileName","lineNumber","columnNumber","map","user","onClick","_id","username","message","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/keusu/Documents/test/bingo/src/components/Chat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst ChatApp = () => {\r\n  const [usersData, setUsersData] = useState([]);\r\n  const [ud, setUd] = useState(null);\r\n  const [selectedUserId, setSelectedUserId] = useState(null);\r\n  const [messagesData, setMessagesData] = useState({});\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const sud = localStorage.getItem('userData');\r\n    if (sud) {\r\n      const parseud = JSON.parse(sud);\r\n      setUd(parseud);\r\n      console.log(parseud['user']['email']);\r\n    } else {\r\n      navigate('/login');\r\n    }\r\n\r\n    // Fetch users data from the API\r\n    axios.get('http://localhost:7000/users')\r\n      .then((response) => {\r\n        setUsersData(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching users:', error);\r\n      });\r\n\r\n    // Set other initial data\r\n    const hardcodedMessages = {\r\n      1: [\r\n        { id: 1, text: 'Hi, how are you?' },\r\n        { id: 2, text: \"I'm good, thanks!\" },\r\n      ],\r\n      2: [\r\n        { id: 1, text: 'Hello there!' },\r\n        { id: 2, text: \"How's it going?\" },\r\n      ],\r\n      3: [\r\n        { id: 1, text: 'Hey!' },\r\n        { id: 2, text: \"I'm doing well, thanks.\" },\r\n      ],\r\n    };\r\n    setMessagesData(hardcodedMessages);\r\n\r\n  }, [navigate]);\r\n\r\n  const handleUserClick = (userId) => {\r\n    setSelectedUserId(userId);\r\n  };\r\n\r\n  const handleSendMessage = () => {\r\n    if (newMessage.trim() === '') {\r\n      return; // Don't send empty messages\r\n    }\r\n\r\n    const updatedMessages = { ...messagesData };\r\n    const newMessageObject = {\r\n      id: Date.now(), // Using timestamp as a unique ID for simplicity\r\n      text: newMessage,\r\n    };\r\n\r\n    if (selectedUserId in updatedMessages) {\r\n      updatedMessages[selectedUserId] = [\r\n        ...updatedMessages[selectedUserId],\r\n        newMessageObject,\r\n      ];\r\n    } else {\r\n      updatedMessages[selectedUserId] = [newMessageObject];\r\n    }\r\n\r\n    setMessagesData(updatedMessages);\r\n    setNewMessage('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h2>User List</h2>\r\n        <h2>Current user name {ud ? ud['user']['username'] : ''}</h2>\r\n        <ul>\r\n          {usersData.map((user) => (\r\n            <li key={user._id} onClick={() => handleUserClick(user._id)}>\r\n              {user.username}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      <div>\r\n        <h2>Messages</h2>\r\n        {selectedUserId ? (\r\n          <div>\r\n            <ul>\r\n              {messagesData[selectedUserId]?.map((message) => (\r\n                <li key={message.id}>{message.text}</li>\r\n              ))}\r\n            </ul>\r\n            <input\r\n              type=\"text\"\r\n              value={newMessage}\r\n              onChange={(e) => setNewMessage(e.target.value)}\r\n              placeholder=\"Type your message...\"\r\n            />\r\n            <button onClick={handleSendMessage}>Send</button>\r\n          </div>\r\n        ) : (\r\n          <p>Select a user to view messages.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatApp;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}