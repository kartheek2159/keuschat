{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\keusu\\\\Documents\\\\test\\\\bingo\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from 'react';\n// import { connect } from 'nats.ws';\n\n// function App() {\n//   const [nc, setConnection] = useState(undefined);\n//   const [lastError, setLastError] = useState(\"\");\n//   // const addmsg=(err,msg)=>{\n//   //   console.log(msg.subject)\n//   // }\n//   useEffect(() => {\n//     if (nc === undefined) {\n//       const connectToNats = async () => {\n//         try {\n//           const natsConnection = await connect({\n//             servers: \"http://localhost:4222\"\n//           });\n//           setConnection(natsConnection);\n//           // nc.subscribe(\">\",{callback:addmsg})\n\n//         } catch (err) {\n//           setLastError(\"Error connecting\");\n//           console.error(err);\n//         }\n//       };\n\n//       connectToNats();\n//     }\n//   }, [nc]);\n\n//   const state = nc ? \"Connected\" : \"Not Connected\";\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Kartheek</h1>\n//       <h1>{state}</h1>\n//       <h3>{lastError ? lastError : \"\"}</h3>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport { useState, useEffect } from 'react';\nimport { StringCodec, connect, createInbox } from 'nats.ws';\n\n// ... (other imports)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [nc, setConnection] = useState(undefined);\n  const [lastError, setLastError] = useState(\"\");\n  const [receivedMessages, setReceivedMessages] = useState([]);\n  const [sendMessage, setSendMessage] = useState(\"\");\n  const sc = StringCodec();\n  useEffect(() => {\n    if (nc === undefined) {\n      const connectToNats = async () => {\n        try {\n          const natsConnection = await connect({\n            servers: \"http://localhost:9090\"\n          });\n          setConnection(natsConnection);\n          console.log(natsConnection);\n\n          // const subscription = natsConnection.subscribe(\"trail\", (err, msg) => {\n          //   if (err) {\n          //     console.error(err);\n          //   } else {\n          //     const decodedMessage = sc.decode(msg.data);\n          //     console.log(decodedMessage)\n          //     setReceivedMessages((prevMessages) => [...prevMessages, decodedMessage]);\n          //   }\n          //   console.log(msg.data)\n          // });\n\n          const sub = nc.subscribe(\"trail\", {\n            callback: (err, msg) => {\n              if (err) {\n                console.log(err);\n              } else {\n                console.log(sc.decode(msg.data));\n              }\n            },\n            max: 5\n          });\n          sub.unsubscribe(5);\n        } catch (err) {\n          setLastError(\"Error connecting\");\n          console.error(err.message);\n        }\n      };\n      connectToNats();\n    }\n  }, [nc, sendMessage]);\n  const state = nc ? \"Connected\" : \"Not Connected\";\n  const handleSend = () => {\n    if (nc) {\n      const subject = \"trail\";\n      nc.publish(subject, sc.encode(sendMessage));\n    } else {\n      console.error(\"Not connected to NATS\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Kartheek\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: lastError ? lastError : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Received Messages:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: receivedMessages.map((message, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: sendMessage,\n      onChange: e => setSendMessage(e.target.value),\n      placeholder: \"Type your message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSend,\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"M2WkZzSHiI8/wHcqkLEOymKyVFA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","StringCodec","connect","createInbox","jsxDEV","_jsxDEV","App","_s","nc","setConnection","undefined","lastError","setLastError","receivedMessages","setReceivedMessages","sendMessage","setSendMessage","sc","connectToNats","natsConnection","servers","console","log","sub","subscribe","callback","err","msg","decode","data","max","unsubscribe","error","message","state","handleSend","subject","publish","encode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/keusu/Documents/test/bingo/src/App.js"],"sourcesContent":["// import { useState, useEffect } from 'react';\n// import { connect } from 'nats.ws';\n\n// function App() {\n//   const [nc, setConnection] = useState(undefined);\n//   const [lastError, setLastError] = useState(\"\");\n//   // const addmsg=(err,msg)=>{\n//   //   console.log(msg.subject)\n//   // }\n//   useEffect(() => {\n//     if (nc === undefined) {\n//       const connectToNats = async () => {\n//         try {\n//           const natsConnection = await connect({\n//             servers: \"http://localhost:4222\"\n//           });\n//           setConnection(natsConnection);\n//           // nc.subscribe(\">\",{callback:addmsg})\n          \n//         } catch (err) {\n//           setLastError(\"Error connecting\");\n//           console.error(err);\n//         }\n//       };\n\n//       connectToNats();\n//     }\n//   }, [nc]);\n\n//   const state = nc ? \"Connected\" : \"Not Connected\";\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Kartheek</h1>\n//       <h1>{state}</h1>\n//       <h3>{lastError ? lastError : \"\"}</h3>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\nimport { useState, useEffect } from 'react';\nimport { StringCodec, connect, createInbox } from 'nats.ws';\n\n// ... (other imports)\n\nfunction App() {\n  const [nc, setConnection] = useState(undefined);\n  const [lastError, setLastError] = useState(\"\");\n  const [receivedMessages, setReceivedMessages] = useState([]);\n  const [sendMessage, setSendMessage] = useState(\"\");\n  const sc = StringCodec();\n\n  useEffect(() => {\n    if (nc === undefined) {\n      const connectToNats = async () => {\n        try {\n          const natsConnection = await connect({\n            servers: \"http://localhost:9090\"\n          });\n          setConnection(natsConnection);\n          console.log(natsConnection)\n\n          // const subscription = natsConnection.subscribe(\"trail\", (err, msg) => {\n          //   if (err) {\n          //     console.error(err);\n          //   } else {\n          //     const decodedMessage = sc.decode(msg.data);\n          //     console.log(decodedMessage)\n          //     setReceivedMessages((prevMessages) => [...prevMessages, decodedMessage]);\n          //   }\n          //   console.log(msg.data)\n          // });\n          \n\n          const sub=nc.subscribe(\"trail\",{\n            callback:(err,msg)=>{\n              if(err){\n                console.log(err)\n              }\n              else{\n                console.log(sc.decode(msg.data))\n              }\n            },\n            max:5,\n          })\n          \n\n          sub.unsubscribe(5);\n        } catch (err) {\n          setLastError(\"Error connecting\");\n          console.error(err.message);\n        }\n      };\n\n      connectToNats();\n    }\n  }, [nc,sendMessage]);\n\n  const state = nc ? \"Connected\" : \"Not Connected\";\n\n  const handleSend = () => {\n    if (nc) {\n      const subject = \"trail\";\n      nc.publish(subject, sc.encode(sendMessage));\n    } else {\n      console.error(\"Not connected to NATS\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Kartheek</h1>\n      <h1>{state}</h1>\n      <h3>{lastError ? lastError : \"\"}</h3>\n      <div>\n        <p>Received Messages:</p>\n        <ul>\n          {receivedMessages.map((message, index) => (\n            <li key={index}>{message}</li>\n          ))}\n        </ul>\n      </div>\n      <input\n        type=\"text\"\n        value={sendMessage}\n        onChange={(e) => setSendMessage(e.target.value)}\n        placeholder=\"Type your message\"\n      />\n      <button onClick={handleSend}>Send Message</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}