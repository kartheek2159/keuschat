{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\keusu\\\\Documents\\\\test\\\\bingo\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from 'react';\n// import { connect } from 'nats.ws';\n\n// function App() {\n//   const [nc, setConnection] = useState(undefined);\n//   const [lastError, setLastError] = useState(\"\");\n//   // const addmsg=(err,msg)=>{\n//   //   console.log(msg.subject)\n//   // }\n//   useEffect(() => {\n//     if (nc === undefined) {\n//       const connectToNats = async () => {\n//         try {\n//           const natsConnection = await connect({\n//             servers: \"http://localhost:4222\"\n//           });\n//           setConnection(natsConnection);\n//           // nc.subscribe(\">\",{callback:addmsg})\n\n//         } catch (err) {\n//           setLastError(\"Error connecting\");\n//           console.error(err);\n//         }\n//       };\n\n//       connectToNats();\n//     }\n//   }, [nc]);\n\n//   const state = nc ? \"Connected\" : \"Not Connected\";\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Kartheek</h1>\n//       <h1>{state}</h1>\n//       <h3>{lastError ? lastError : \"\"}</h3>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport { useState, useEffect } from 'react';\nimport { StringCodec, connect } from 'nats.ws';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [nc, setConnection] = useState(undefined);\n  const [lastError, setLastError] = useState(\"\");\n  const [receivedMessage, setReceivedMessage] = useState(\"\");\n  const [sendMessage, setSendMessage] = useState(\"\");\n  const sc = StringCodec();\n  useEffect(() => {\n    // console.log(sendMessage)\n    if (nc === undefined) {\n      const connectToNats = async () => {\n        try {\n          const natsConnection = await connect({\n            servers: \"http://localhost:9090\"\n          });\n          setConnection(natsConnection);\n          console.log(natsConnection);\n\n          // Subscribe to a specific subject\n          const subscription = natsConnection.subscribe(\"trail\", (err, msg) => {\n            if (err) {\n              console.error(err);\n            } else {\n              console.log(msg.data);\n              console.log(sc.decode(msg.data));\n              // Handle incoming messages\n              setReceivedMessage(msg.data);\n            }\n          });\n\n          // Unsubscribe when component is unmounted\n          return () => subscription.unsubscribe();\n        } catch (err) {\n          setLastError(\"Error connecting\");\n          console.error(err);\n        }\n      };\n      connectToNats();\n    }\n  }, [nc, sendMessage]);\n  const state = nc ? \"Connected\" : \"Not Connected\";\n  const handleSend = () => {\n    // Check if the connection is available\n    if (nc) {\n      // Replace \"your_subject\" with the actual subject you want to publish to\n      const subject = \"trail\";\n\n      // Publish the message\n      nc.publish(subject, sc.encode(sendMessage));\n      console.log(sendMessage);\n    } else {\n      console.error(\"Not connected to NATS\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Kartheek\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: lastError ? lastError : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Received Message: \", receivedMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: sendMessage,\n      onChange: e => setSendMessage(e.target.value),\n      placeholder: \"Type your message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSend,\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QQHBs80j24HMJlzCLqFL5Am/9vE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","StringCodec","connect","jsxDEV","_jsxDEV","App","_s","nc","setConnection","undefined","lastError","setLastError","receivedMessage","setReceivedMessage","sendMessage","setSendMessage","sc","connectToNats","natsConnection","servers","console","log","subscription","subscribe","err","msg","error","data","decode","unsubscribe","state","handleSend","subject","publish","encode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/keusu/Documents/test/bingo/src/App.js"],"sourcesContent":["// import { useState, useEffect } from 'react';\n// import { connect } from 'nats.ws';\n\n// function App() {\n//   const [nc, setConnection] = useState(undefined);\n//   const [lastError, setLastError] = useState(\"\");\n//   // const addmsg=(err,msg)=>{\n//   //   console.log(msg.subject)\n//   // }\n//   useEffect(() => {\n//     if (nc === undefined) {\n//       const connectToNats = async () => {\n//         try {\n//           const natsConnection = await connect({\n//             servers: \"http://localhost:4222\"\n//           });\n//           setConnection(natsConnection);\n//           // nc.subscribe(\">\",{callback:addmsg})\n          \n//         } catch (err) {\n//           setLastError(\"Error connecting\");\n//           console.error(err);\n//         }\n//       };\n\n//       connectToNats();\n//     }\n//   }, [nc]);\n\n//   const state = nc ? \"Connected\" : \"Not Connected\";\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Kartheek</h1>\n//       <h1>{state}</h1>\n//       <h3>{lastError ? lastError : \"\"}</h3>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\nimport { useState, useEffect } from 'react';\nimport { StringCodec, connect } from 'nats.ws';\n\nfunction App() {\n  const [nc, setConnection] = useState(undefined);\n  const [lastError, setLastError] = useState(\"\");\n  const [receivedMessage, setReceivedMessage] = useState(\"\");\n  const [sendMessage, setSendMessage] = useState(\"\");\n  const sc=StringCodec();\n\n  useEffect(() => {\n    // console.log(sendMessage)\n    if (nc === undefined) {\n      const connectToNats = async () => {\n        try {\n          const natsConnection = await connect({\n            servers: \"http://localhost:9090\"\n          });\n          setConnection(natsConnection);\n          console.log(natsConnection)\n  \n          // Subscribe to a specific subject\n          const subscription = natsConnection.subscribe(\"trail\", (err, msg) => {\n            if (err) {\n              \n              console.error(err);\n            } else {\n            \n              console.log(msg.data);\n              console.log(sc.decode(msg.data))\n              // Handle incoming messages\n              setReceivedMessage(msg.data);\n            }\n          });\n  \n          // Unsubscribe when component is unmounted\n          return () => subscription.unsubscribe();\n        } catch (err) {\n          setLastError(\"Error connecting\");\n          console.error(err);\n        }\n      };\n  \n      connectToNats();\n    }\n  }, [nc, sendMessage]);\n  \n  const state = nc ? \"Connected\" : \"Not Connected\";\n\n  const handleSend = () => {\n    // Check if the connection is available\n    if (nc) {\n      // Replace \"your_subject\" with the actual subject you want to publish to\n      const subject = \"trail\";\n      \n      // Publish the message\n      nc.publish(subject, sc.encode(sendMessage));\n      console.log(sendMessage)\n        \n    } else {\n      console.error(\"Not connected to NATS\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Kartheek</h1>\n      <h1>{state}</h1>\n      <h3>{lastError ? lastError : \"\"}</h3>\n      <p>Received Message: {receivedMessage}</p>\n      <input\n        type=\"text\"\n        value={sendMessage}\n        onChange={(e) => setSendMessage(e.target.value)}\n        placeholder=\"Type your message\"\n      />\n      <button onClick={handleSend}>Send Message</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}