{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Keus Automation\\\\Documents\\\\keuschat\\\\bingo\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [nc, setConnection] = useState(undefined);\n  const [lastError, setLastError] = useState(\"\");\n  const [receivedMessages, setReceivedMessages] = useState([]);\n  const [sendMessage, setSendMessage] = useState(\"\");\n  const sc = StringCodec();\n  useEffect(() => {\n    if (nc === undefined) {\n      const connectToNats = async () => {\n        try {\n          const natsConnection = await connect({\n            servers: \"http://localhost:9090\",\n            headers: {\n              \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n              \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n              \"Access-Control-Allow-Headers\": \"Origin, X-Requested-With, Content-Type, Accept\"\n            }\n          });\n          setConnection(natsConnection);\n          const subscription = natsConnection.subscribe(\"trail\", {\n            callback: (err, msg) => {\n              if (err) {\n                console.error(err);\n              } else {\n                const message = sc.decode(msg.data);\n                console.log(\"Received message:\", message);\n                setReceivedMessages(prevMessages => [...prevMessages, message]);\n              }\n            }\n          });\n          console.log(subscription);\n          return () => subscription.unsubscribe();\n        } catch (err) {\n          setLastError(\"Error connecting\");\n          console.error(err);\n        }\n      };\n      connectToNats();\n    }\n  }, [nc]);\n  useEffect(() => {\n    if (nc) {\n      const state = nc ? \"Connected\" : \"Not Connected\";\n      console.log(state);\n    }\n  }, [nc]);\n  const handleSend = () => {\n    if (nc) {\n      const subject = \"trail\";\n      nc.publish(subject, sc.encode(sendMessage));\n      console.log(sendMessage);\n    } else {\n      console.error(\"Not connected to NATS\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Kartheek\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: nc ? \"Connected\" : \"Not Connected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: lastError ? lastError : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), receivedMessages.map((message, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Received Message: \", message]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: sendMessage,\n      onChange: e => setSendMessage(e.target.value),\n      placeholder: \"Type your message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSend,\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QKUd5AS2F/Pfl5giGeJO/RhDW0U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","_s","nc","setConnection","useState","undefined","lastError","setLastError","receivedMessages","setReceivedMessages","sendMessage","setSendMessage","sc","StringCodec","useEffect","connectToNats","natsConnection","connect","servers","headers","subscription","subscribe","callback","err","msg","console","error","message","decode","data","log","prevMessages","unsubscribe","state","handleSend","subject","publish","encode","_jsxDEV","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Keus Automation/Documents/keuschat/bingo/src/App.js"],"sourcesContent":["\r\nfunction App() {\r\n  const [nc, setConnection] = useState(undefined);\r\n  const [lastError, setLastError] = useState(\"\");\r\n  const [receivedMessages, setReceivedMessages] = useState([]);\r\n  const [sendMessage, setSendMessage] = useState(\"\");\r\n  const sc = StringCodec();\r\n\r\n  useEffect(() => {\r\n    if (nc === undefined) {\r\n      const connectToNats = async () => {\r\n        try {\r\n          const natsConnection = await connect({\r\n            servers: \"http://localhost:9090\",\r\n            headers: {\r\n              \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\r\n              \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\r\n              \"Access-Control-Allow-Headers\": \"Origin, X-Requested-With, Content-Type, Accept\",\r\n            },\r\n          });\r\n          setConnection(natsConnection);\r\n\r\n          const subscription = natsConnection.subscribe(\"trail\", {\r\n            callback: (err, msg) => {\r\n              if (err) {\r\n                console.error(err);\r\n              } else {\r\n                const message = sc.decode(msg.data);\r\n                console.log(\"Received message:\", message);\r\n                setReceivedMessages((prevMessages) => [...prevMessages, message]);\r\n              }\r\n            },\r\n          });\r\n          console.log(subscription);\r\n\r\n          return () => subscription.unsubscribe();\r\n        } catch (err) {\r\n          setLastError(\"Error connecting\");\r\n          console.error(err);\r\n        }\r\n      };\r\n\r\n      connectToNats();\r\n    }\r\n  }, [nc]);\r\n\r\n  useEffect(() => {\r\n    if (nc) {\r\n      const state = nc ? \"Connected\" : \"Not Connected\";\r\n      console.log(state);\r\n    }\r\n  }, [nc]);\r\n\r\n  const handleSend = () => {\r\n    if (nc) {\r\n      const subject = \"trail\";\r\n      nc.publish(subject, sc.encode(sendMessage));\r\n      console.log(sendMessage);\r\n    } else {\r\n      console.error(\"Not connected to NATS\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Kartheek</h1>\r\n      <h1>{nc ? \"Connected\" : \"Not Connected\"}</h1>\r\n      <h3>{lastError ? lastError : \"\"}</h3>\r\n      {/* Display all received messages */}\r\n      {receivedMessages.map((message, index) => (\r\n        <p key={index}>Received Message: {message}</p>\r\n      ))}\r\n      <input\r\n        type=\"text\"\r\n        value={sendMessage}\r\n        onChange={(e) => setSendMessage(e.target.value)}\r\n        placeholder=\"Type your message\"\r\n      />\r\n      <button onClick={handleSend}>Send Message</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}