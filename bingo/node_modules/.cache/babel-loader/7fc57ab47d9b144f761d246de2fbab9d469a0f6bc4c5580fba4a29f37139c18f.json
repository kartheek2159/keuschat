{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\keusu\\\\Documents\\\\test\\\\bingo\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from 'react';\n// import { connect } from 'nats.ws';\n\n// function App() {\n//   const [nc, setConnection] = useState(undefined);\n//   const [lastError, setLastError] = useState(\"\");\n//   // const addmsg=(err,msg)=>{\n//   //   console.log(msg.subject)\n//   // }\n//   useEffect(() => {\n//     if (nc === undefined) {\n//       const connectToNats = async () => {\n//         try {\n//           const natsConnection = await connect({\n//             servers: \"http://localhost:4222\"\n//           });\n//           setConnection(natsConnection);\n//           // nc.subscribe(\">\",{callback:addmsg})\n\n//         } catch (err) {\n//           setLastError(\"Error connecting\");\n//           console.error(err);\n//         }\n//       };\n\n//       connectToNats();\n//     }\n//   }, [nc]);\n\n//   const state = nc ? \"Connected\" : \"Not Connected\";\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Kartheek</h1>\n//       <h1>{state}</h1>\n//       <h3>{lastError ? lastError : \"\"}</h3>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import { useState, useEffect } from 'react';\n// import { StringCodec, connect } from 'nats.ws';\n\n// function App() {\n//   const [nc, setConnection] = useState(undefined);\n//   const [lastError, setLastError] = useState(\"\");\n//   const [receivedMessage, setReceivedMessage] = useState(\"\");\n//   const [sendMessage, setSendMessage] = useState(\"\");\n//   const sc=StringCodec();\n\n//   useEffect(() => {\n//     // console.log(sendMessage)\n//     if (nc === undefined) {\n//       const connectToNats = async () => {\n//         try {\n//           const natsConnection = await connect({\n//             servers: \"http://localhost:9090\"\n//           });\n//           setConnection(natsConnection);\n//           console.log(natsConnection)\n\n//           // Subscribe to a specific subject\n\n//           const subscription = natsConnection.subscribe(\"trail\", (err, msg) => {\n//             if (err) {\n\n//               console.error(err);\n//             } else {\n\n//               console.log(msg.data);\n//               console.log(sc.decode(msg.data))\n//               // Handle incoming messages\n//               setReceivedMessage(msg.data);\n//             }\n//           });\n//           console.log(subscription)\n\n//           // Unsubscribe when component is unmounted\n//           return () => subscription.unsubscribe();\n//         } catch (err) {\n//           setLastError(\"Error connecting\");\n//           console.error(err);\n//         }\n//       };\n\n//       connectToNats();\n//     }\n//   }, [nc, sendMessage]);\n\n//   const state = nc ? \"Connected\" : \"Not Connected\";\n\n//   const handleSend = () => {\n//     // Check if the connection is available\n//     if (nc) {\n\n//       const subject = \"trail\";\n\n//       // Publish the message\n//       nc.publish(subject, sc.encode(sendMessage));\n//       console.log(sendMessage)\n\n//     } else {\n//       console.error(\"Not connected to NATS\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Kartheek</h1>\n//       <h1>{state}</h1>\n//       <h3>{lastError ? lastError : \"\"}</h3>\n//       <p>Received Message: {receivedMessage}</p>\n//       <input\n//         type=\"text\"\n//         value={sendMessage}\n//         onChange={(e) => setSendMessage(e.target.value)}\n//         placeholder=\"Type your message\"\n//       />\n//       <button onClick={handleSend}>Send Message</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { connect } from 'nats';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [receivedMessages, setReceivedMessages] = useState([]);\n  const nc = connect();\n  useEffect(() => {\n    const socket = new WebSocket('ws://localhost:9090');\n    socket.onopen = () => {\n      console.log('Connected to server');\n    };\n    socket.onmessage = event => {\n      const receivedMessage = event.data;\n      setReceivedMessages(prevMessages => [...prevMessages, receivedMessage]);\n    };\n    socket.onclose = () => {\n      console.log('Connection closed');\n    };\n\n    // Subscribe to NATS messages\n    const subscription = nc.subscribe('messages', msg => {\n      setReceivedMessages(prevMessages => [...prevMessages, msg]);\n    });\n    return () => {\n      socket.close();\n      subscription.unsubscribe();\n    };\n  }, []);\n  const sendMessage = () => {\n    const socket = new WebSocket('ws://localhost:9090');\n    socket.onopen = () => {\n      console.log('Connected to server');\n      socket.send(message);\n      socket.close();\n    };\n\n    // Publish the message to NATS\n    nc.publish('messages', message);\n    setMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Send Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Received Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: receivedMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: msg\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"BLVCmzoBAsb6SQPE307OKLiMohE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","connect","jsxDEV","_jsxDEV","App","_s","message","setMessage","receivedMessages","setReceivedMessages","nc","socket","WebSocket","onopen","console","log","onmessage","event","receivedMessage","data","prevMessages","onclose","subscription","subscribe","msg","close","unsubscribe","sendMessage","send","publish","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","map","index","_c","$RefreshReg$"],"sources":["C:/Users/keusu/Documents/test/bingo/src/App.js"],"sourcesContent":["// import { useState, useEffect } from 'react';\n// import { connect } from 'nats.ws';\n\n// function App() {\n//   const [nc, setConnection] = useState(undefined);\n//   const [lastError, setLastError] = useState(\"\");\n//   // const addmsg=(err,msg)=>{\n//   //   console.log(msg.subject)\n//   // }\n//   useEffect(() => {\n//     if (nc === undefined) {\n//       const connectToNats = async () => {\n//         try {\n//           const natsConnection = await connect({\n//             servers: \"http://localhost:4222\"\n//           });\n//           setConnection(natsConnection);\n//           // nc.subscribe(\">\",{callback:addmsg})\n          \n//         } catch (err) {\n//           setLastError(\"Error connecting\");\n//           console.error(err);\n//         }\n//       };\n\n//       connectToNats();\n//     }\n//   }, [nc]);\n\n//   const state = nc ? \"Connected\" : \"Not Connected\";\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Kartheek</h1>\n//       <h1>{state}</h1>\n//       <h3>{lastError ? lastError : \"\"}</h3>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n// import { useState, useEffect } from 'react';\n// import { StringCodec, connect } from 'nats.ws';\n\n// function App() {\n//   const [nc, setConnection] = useState(undefined);\n//   const [lastError, setLastError] = useState(\"\");\n//   const [receivedMessage, setReceivedMessage] = useState(\"\");\n//   const [sendMessage, setSendMessage] = useState(\"\");\n//   const sc=StringCodec();\n\n//   useEffect(() => {\n//     // console.log(sendMessage)\n//     if (nc === undefined) {\n//       const connectToNats = async () => {\n//         try {\n//           const natsConnection = await connect({\n//             servers: \"http://localhost:9090\"\n//           });\n//           setConnection(natsConnection);\n//           console.log(natsConnection)\n  \n//           // Subscribe to a specific subject\n          \n//           const subscription = natsConnection.subscribe(\"trail\", (err, msg) => {\n//             if (err) {\n              \n//               console.error(err);\n//             } else {\n            \n//               console.log(msg.data);\n//               console.log(sc.decode(msg.data))\n//               // Handle incoming messages\n//               setReceivedMessage(msg.data);\n//             }\n//           });\n//           console.log(subscription)\n  \n//           // Unsubscribe when component is unmounted\n//           return () => subscription.unsubscribe();\n//         } catch (err) {\n//           setLastError(\"Error connecting\");\n//           console.error(err);\n//         }\n//       };\n  \n//       connectToNats();\n//     }\n//   }, [nc, sendMessage]);\n  \n//   const state = nc ? \"Connected\" : \"Not Connected\";\n\n//   const handleSend = () => {\n//     // Check if the connection is available\n//     if (nc) {\n     \n//       const subject = \"trail\";\n      \n//       // Publish the message\n//       nc.publish(subject, sc.encode(sendMessage));\n//       console.log(sendMessage)\n        \n//     } else {\n//       console.error(\"Not connected to NATS\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Kartheek</h1>\n//       <h1>{state}</h1>\n//       <h3>{lastError ? lastError : \"\"}</h3>\n//       <p>Received Message: {receivedMessage}</p>\n//       <input\n//         type=\"text\"\n//         value={sendMessage}\n//         onChange={(e) => setSendMessage(e.target.value)}\n//         placeholder=\"Type your message\"\n//       />\n//       <button onClick={handleSend}>Send Message</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { connect } from 'nats';\n\nconst App = () => {\n  const [message, setMessage] = useState('');\n  const [receivedMessages, setReceivedMessages] = useState([]);\n  const nc = connect();\n\n  useEffect(() => {\n    const socket = new WebSocket('ws://localhost:9090');\n\n    socket.onopen = () => {\n      console.log('Connected to server');\n    };\n\n    socket.onmessage = (event) => {\n      const receivedMessage = event.data;\n      setReceivedMessages((prevMessages) => [...prevMessages, receivedMessage]);\n    };\n\n    socket.onclose = () => {\n      console.log('Connection closed');\n    };\n\n    // Subscribe to NATS messages\n    const subscription = nc.subscribe('messages', (msg) => {\n      setReceivedMessages((prevMessages) => [...prevMessages, msg]);\n    });\n\n    return () => {\n      socket.close();\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  const sendMessage = () => {\n    const socket = new WebSocket('ws://localhost:9090');\n    socket.onopen = () => {\n      console.log('Connected to server');\n      socket.send(message);\n      socket.close();\n    };\n\n    // Publish the message to NATS\n    nc.publish('messages', message);\n\n    setMessage('');\n  };\n\n  return (\n    <div className=\"App\">\n      <div>\n        <h2>Send Message</h2>\n        <input\n          type=\"text\"\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n        />\n        <button onClick={sendMessage}>Send</button>\n      </div>\n      <div>\n        <h2>Received Messages</h2>\n        <ul>\n          {receivedMessages.map((msg, index) => (\n            <li key={index}>{msg}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}