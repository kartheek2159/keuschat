{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\keusu\\\\Documents\\\\test\\\\bingo\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { StringCodec, connect } from 'nats.ws';\nimport axios from 'axios';\nimport './chatApp.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatApp = () => {\n  _s();\n  var _receivedMessages$sel;\n  const [usersData, setUsersData] = useState([]);\n  const [ud, setUd] = useState(null);\n  const [currid, setCurrid] = useState(null);\n  const [selectedUserId, setSelectedUserId] = useState(null);\n  const [messagesData, setMessagesData] = useState({});\n  const [newMessage, setNewMessage] = useState('');\n  const navigate = useNavigate();\n  const [nc, setConnection] = useState(undefined);\n  const [lastError, setLastError] = useState(\"\");\n  const [receivedMessages, setReceivedMessages] = useState([]);\n  const [sendMessage, setSendMessage] = useState(\"\");\n  const sc = StringCodec();\n  useEffect(() => {\n    const sud = localStorage.getItem('userData');\n    const parseud = JSON.parse(sud);\n    setUd(parseud);\n    setCurrid(parseud['user']['_id']);\n    console.log(currid);\n    console.log(parseud['user']['email']);\n\n    // Fetch users data from the API\n    axios.get('http://localhost:7000/user').then(response => {\n      setUsersData(response.data);\n    }).catch(error => {\n      console.error('Error fetching users:', error);\n    });\n    if (nc === undefined) {\n      const connectToNats = async () => {\n        try {\n          const natsConnection = await connect({\n            servers: \"http://localhost:9090\",\n            headers: {\n              \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n              \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n              \"Access-Control-Allow-Headers\": \"Origin, X-Requested-With, Content-Type, Accept\"\n            }\n          });\n          setConnection(natsConnection);\n          console.log(`chat.${currid}.${selectedUserId}`);\n          const subscription = natsConnection.subscribe(`chat.${currid}.${selectedUserId}`, {\n            callback: (err, msg) => {\n              if (err) {\n                console.error(err);\n              } else {\n                console.log(message);\n                const message = sc.decode(msg.data);\n                console.log(\"Received message:\", message);\n                setReceivedMessages(prevMessages => [...prevMessages, message]);\n              }\n            }\n          });\n          console.log(subscription);\n          return () => subscription.unsubscribe();\n        } catch (err) {\n          setLastError(\"Error connecting\");\n          console.error(err);\n        }\n      };\n      connectToNats();\n    }\n  }, [nc]);\n  const handleUserClick = userId => {\n    console.log(userId);\n    setSelectedUserId(userId);\n  };\n  const handleSendMessage = () => {\n    if (newMessage.trim() === '') {\n      return; // Don't send empty messages\n    }\n    if (nc) {\n      const subject = `chat.${currid}.${selectedUserId}`;\n      nc.publish(subject, sc.encode(newMessage));\n      console.log(newMessage);\n    } else {\n      console.error(\"Not connected to NATS\");\n    }\n    const updatedMessages = {\n      ...messagesData\n    };\n    const newMessageObject = {\n      id: Date.now(),\n      // Using timestamp as a unique ID for simplicity\n      text: newMessage\n    };\n    if (selectedUserId in updatedMessages) {\n      updatedMessages[selectedUserId] = [...updatedMessages[selectedUserId], newMessageObject];\n    } else {\n      updatedMessages[selectedUserId] = [newMessageObject];\n    }\n    setMessagesData(updatedMessages);\n    setNewMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"User List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Current user name \", ud ? ud['user']['username'] : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: usersData.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleUserClick(user._id),\n          children: user.username\n        }, user._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), selectedUserId ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          children: (_receivedMessages$sel = receivedMessages[selectedUserId]) === null || _receivedMessages$sel === void 0 ? void 0 : _receivedMessages$sel.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: message.text\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value),\n            placeholder: \"Type your message...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSendMessage,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select a user to view messages.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatApp, \"N3BvA2k566jq3ChCMnH8AGTflMI=\", false, function () {\n  return [useNavigate];\n});\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","StringCodec","connect","axios","jsxDEV","_jsxDEV","ChatApp","_s","_receivedMessages$sel","usersData","setUsersData","ud","setUd","currid","setCurrid","selectedUserId","setSelectedUserId","messagesData","setMessagesData","newMessage","setNewMessage","navigate","nc","setConnection","undefined","lastError","setLastError","receivedMessages","setReceivedMessages","sendMessage","setSendMessage","sc","sud","localStorage","getItem","parseud","JSON","parse","console","log","get","then","response","data","catch","error","connectToNats","natsConnection","servers","headers","subscription","subscribe","callback","err","msg","message","decode","prevMessages","unsubscribe","handleUserClick","userId","handleSendMessage","trim","subject","publish","encode","updatedMessages","newMessageObject","id","Date","now","text","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","user","onClick","_id","username","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/keusu/Documents/test/bingo/src/components/Chat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { StringCodec, connect } from 'nats.ws';\r\nimport axios from 'axios';\r\nimport './chatApp.css'\r\n\r\nconst ChatApp = () => {\r\n  const [usersData, setUsersData] = useState([]);\r\n  const [ud, setUd] = useState(null);\r\n  const [currid,setCurrid]=useState(null)\r\n  const [selectedUserId, setSelectedUserId] = useState(null);\r\n  const [messagesData, setMessagesData] = useState({});\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const [nc, setConnection] = useState(undefined);\r\n  const [lastError, setLastError] = useState(\"\");\r\n  const [receivedMessages, setReceivedMessages] = useState([]);\r\n  const [sendMessage, setSendMessage] = useState(\"\");\r\n  const sc = StringCodec();\r\n\r\n  useEffect(() => {\r\n    const sud = localStorage.getItem('userData');\r\n    const parseud = JSON.parse(sud);\r\n    setUd(parseud);\r\n    setCurrid(parseud['user']['_id'])\r\n    console.log(currid)\r\n    console.log(parseud['user']['email']);\r\n    \r\n\r\n    // Fetch users data from the API\r\n    axios.get('http://localhost:7000/user')\r\n      .then((response) => {\r\n        setUsersData(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching users:', error);\r\n      });\r\n      if (nc === undefined) {\r\n        const connectToNats = async () => {\r\n          try {\r\n            const natsConnection = await connect({\r\n              servers: \"http://localhost:9090\",\r\n              headers: {\r\n                \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\r\n                \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\r\n                \"Access-Control-Allow-Headers\": \"Origin, X-Requested-With, Content-Type, Accept\",\r\n              },\r\n            });\r\n            setConnection(natsConnection);\r\n            console.log(`chat.${currid}.${selectedUserId}`)\r\n            const subscription = natsConnection.subscribe(`chat.${currid}.${selectedUserId}`, {\r\n              callback: (err, msg) => {\r\n                if (err) {\r\n                  console.error(err);\r\n                } else {\r\n                  console.log(message)\r\n                  const message = sc.decode(msg.data);\r\n                  console.log(\"Received message:\", message);\r\n                  setReceivedMessages((prevMessages) => [...prevMessages, message]);\r\n                }\r\n              },\r\n            });\r\n            console.log(subscription);\r\n  \r\n            return () => subscription.unsubscribe();\r\n          } catch (err) {\r\n            setLastError(\"Error connecting\");\r\n            console.error(err);\r\n          }\r\n        };\r\n  \r\n        connectToNats();\r\n      }\r\n\r\n  }, [nc]);\r\n\r\n  const handleUserClick = (userId) => {\r\n    console.log(userId)\r\n    setSelectedUserId(userId);\r\n  };\r\n\r\n  const handleSendMessage = () => {\r\n    if (newMessage.trim() === '') {\r\n      return; // Don't send empty messages\r\n    }\r\n  \r\n    if (nc) {\r\n      const subject = `chat.${currid}.${selectedUserId}`;\r\n      nc.publish(subject, sc.encode(newMessage));\r\n      console.log(newMessage);\r\n    } else {\r\n      console.error(\"Not connected to NATS\");\r\n    }\r\n  \r\n    const updatedMessages = { ...messagesData };\r\n    const newMessageObject = {\r\n      id: Date.now(), // Using timestamp as a unique ID for simplicity\r\n      text: newMessage,\r\n    };\r\n  \r\n    if (selectedUserId in updatedMessages) {\r\n      updatedMessages[selectedUserId] = [\r\n        ...updatedMessages[selectedUserId],\r\n        newMessageObject,\r\n      ];\r\n    } else {\r\n      updatedMessages[selectedUserId] = [newMessageObject];\r\n    }\r\n  \r\n    setMessagesData(updatedMessages);\r\n    setNewMessage('');\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"user-list\">\r\n        <h2>User List</h2>\r\n        <h2>Current user name {ud ? ud['user']['username'] : ''}</h2>\r\n        <ul>\r\n          {usersData.map((user) => (\r\n            <li key={user._id} onClick={() => handleUserClick(user._id)}>\r\n              {user.username}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      <div className=\"message-section\">\r\n        <h2>Messages</h2>\r\n        {selectedUserId ? (\r\n          <div>\r\n            <ul>\r\n              {receivedMessages[selectedUserId]?.map((message) => (\r\n                <li key={message.id}>{message.text}</li>\r\n              ))}\r\n            </ul>\r\n            <div className=\"message-input\">\r\n              <input\r\n                type=\"text\"\r\n                value={newMessage}\r\n                onChange={(e) => setNewMessage(e.target.value)}\r\n                placeholder=\"Type your message...\"\r\n              />\r\n              <button onClick={handleSendMessage}>Send</button>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <p>Select a user to view messages.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatApp;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}