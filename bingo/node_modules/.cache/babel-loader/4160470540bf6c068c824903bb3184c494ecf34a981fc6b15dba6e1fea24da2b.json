{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\keusu\\\\Documents\\\\test\\\\bingo\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport './chatApp.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatApp = () => {\n  _s();\n  var _messagesData$selecte;\n  const [usersData, setUsersData] = useState([]);\n  const [ud, setUd] = useState(null);\n  const [selectedUserId, setSelectedUserId] = useState(null);\n  const [messagesData, setMessagesData] = useState({});\n  const [newMessage, setNewMessage] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    const sud = localStorage.getItem('userData');\n    if (sud) {\n      const parseud = JSON.parse(sud);\n      setUd(parseud);\n      console.log(parseud['user']['email']);\n    } else {\n      navigate('/login');\n    }\n\n    // Fetch users data from the API\n    axios.get('http://localhost:7000/user').then(response => {\n      setUsersData(response.data);\n    }).catch(error => {\n      console.error('Error fetching users:', error);\n    });\n  }, [navigate]);\n  const handleUserClick = userId => {\n    print(userId);\n    setSelectedUserId(userId);\n  };\n  const handleSendMessage = () => {\n    if (newMessage.trim() === '') {\n      return; // Don't send empty messages\n    }\n    const updatedMessages = {\n      ...messagesData\n    };\n    const newMessageObject = {\n      id: Date.now(),\n      // Using timestamp as a unique ID for simplicity\n      text: newMessage\n    };\n    if (selectedUserId in updatedMessages) {\n      updatedMessages[selectedUserId] = [...updatedMessages[selectedUserId], newMessageObject];\n    } else {\n      updatedMessages[selectedUserId] = [newMessageObject];\n    }\n    setMessagesData(updatedMessages);\n    setNewMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"User List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Current user name \", ud ? ud['user']['username'] : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: usersData.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleUserClick(user._id),\n          children: user.username\n        }, user._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), selectedUserId ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          children: (_messagesData$selecte = messagesData[selectedUserId]) === null || _messagesData$selecte === void 0 ? void 0 : _messagesData$selecte.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: message.text\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value),\n            placeholder: \"Type your message...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSendMessage,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select a user to view messages.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatApp, \"kwSeAikiJXmjgra5eETRUwkZrzE=\", false, function () {\n  return [useNavigate];\n});\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","jsxDEV","_jsxDEV","ChatApp","_s","_messagesData$selecte","usersData","setUsersData","ud","setUd","selectedUserId","setSelectedUserId","messagesData","setMessagesData","newMessage","setNewMessage","navigate","sud","localStorage","getItem","parseud","JSON","parse","console","log","get","then","response","data","catch","error","handleUserClick","userId","print","handleSendMessage","trim","updatedMessages","newMessageObject","id","Date","now","text","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","user","onClick","_id","username","message","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/keusu/Documents/test/bingo/src/components/Chat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './chatApp.css'\r\n\r\nconst ChatApp = () => {\r\n  const [usersData, setUsersData] = useState([]);\r\n  const [ud, setUd] = useState(null);\r\n  const [selectedUserId, setSelectedUserId] = useState(null);\r\n  const [messagesData, setMessagesData] = useState({});\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const sud = localStorage.getItem('userData');\r\n    if (sud) {\r\n      const parseud = JSON.parse(sud);\r\n      setUd(parseud);\r\n      console.log(parseud['user']['email']);\r\n    } else {\r\n      navigate('/login');\r\n    }\r\n\r\n    // Fetch users data from the API\r\n    axios.get('http://localhost:7000/user')\r\n      .then((response) => {\r\n        setUsersData(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching users:', error);\r\n      });\r\n\r\n  }, [navigate]);\r\n\r\n  const handleUserClick = (userId) => {\r\n    print(userId)\r\n    setSelectedUserId(userId);\r\n  };\r\n\r\n  const handleSendMessage = () => {\r\n    if (newMessage.trim() === '') {\r\n      return; // Don't send empty messages\r\n    }\r\n\r\n    const updatedMessages = { ...messagesData };\r\n    const newMessageObject = {\r\n      id: Date.now(), // Using timestamp as a unique ID for simplicity\r\n      text: newMessage,\r\n    };\r\n\r\n    if (selectedUserId in updatedMessages) {\r\n      updatedMessages[selectedUserId] = [\r\n        ...updatedMessages[selectedUserId],\r\n        newMessageObject,\r\n      ];\r\n    } else {\r\n      updatedMessages[selectedUserId] = [newMessageObject];\r\n    }\r\n\r\n    setMessagesData(updatedMessages);\r\n    setNewMessage('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"user-list\">\r\n        <h2>User List</h2>\r\n        <h2>Current user name {ud ? ud['user']['username'] : ''}</h2>\r\n        <ul>\r\n          {usersData.map((user) => (\r\n            <li key={user._id} onClick={() => handleUserClick(user._id)}>\r\n              {user.username}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      <div className=\"message-section\">\r\n        <h2>Messages</h2>\r\n        {selectedUserId ? (\r\n          <div>\r\n            <ul>\r\n              {messagesData[selectedUserId]?.map((message) => (\r\n                <li key={message.id}>{message.text}</li>\r\n              ))}\r\n            </ul>\r\n            <div className=\"message-input\">\r\n              <input\r\n                type=\"text\"\r\n                value={newMessage}\r\n                onChange={(e) => setNewMessage(e.target.value)}\r\n                placeholder=\"Type your message...\"\r\n              />\r\n              <button onClick={handleSendMessage}>Send</button>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <p>Select a user to view messages.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatApp;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}