{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Keus Automation\\\\Downloads\\\\keuschat\\\\bingo\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { StringCodec, connect } from 'nats.ws';\nimport axios from 'axios';\nimport './chatApp.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatApp = () => {\n  _s();\n  const [usersData, setUsersData] = useState([]);\n  const [ud, setUd] = useState(null);\n  const navigate = useNavigate();\n  const [currid, setCurrid] = useState('');\n  const [selectedUserId, setSelectedUserId] = useState(null);\n  const [newMessage, setNewMessage] = useState('');\n  const [nc, setConnection] = useState(undefined);\n  const [receivedMessages, setReceivedMessages] = useState([]);\n  const [checkchat, setCheckchat] = useState('');\n  const sc = StringCodec();\n  const [chatid, setChatId] = useState('');\n  const connectToNats = async commonSubject => {\n    try {\n      const natsConnection = await connect({\n        servers: \"http://localhost:9090\"\n      });\n      setConnection(natsConnection);\n      console.log(commonSubject);\n      const subscription = natsConnection.subscribe(commonSubject, {\n        callback: (err, msg) => {\n          if (err) {\n            console.error(err);\n          } else {\n            const messageObject = JSON.parse(sc.decode(msg.data));\n            console.log(\"Received message:\", messageObject);\n            setReceivedMessages(prevMessages => [...prevMessages, messageObject]);\n            console.log(subscription);\n          }\n        }\n      });\n      console.log(subscription);\n      return () => {\n        if (nc) {\n          nc.unsubscribe().then(() => {\n            console.log(\"Unsubscribed successfully\");\n          });\n        }\n      };\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  useEffect(() => {\n    const sud = localStorage.getItem('userData');\n    const parseud = JSON.parse(sud);\n    setUd(parseud);\n    setCurrid(parseud['user']['_id']);\n    axios.get('http://localhost:7000/user').then(response => {\n      setUsersData(response.data);\n    }).catch(error => {\n      console.error('Error fetching users:', error);\n    });\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(`http://localhost:7000/msg/${chatid}`);\n        const messages = response.data.map(msg => ({\n          text: msg.text,\n          sender: msg.senderid,\n          // Extracting sender ID from the response data\n          timestamp: msg.createdAt\n        }));\n        console.log(messages);\n        setReceivedMessages(messages);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    };\n    fetchData();\n  }, [nc]);\n  const handleUserClick = async userId => {\n    const userIDs = [currid, userId].sort();\n    const commonSubject = `chat.${userIDs[0]}.${userIDs[1]}`;\n    setSelectedUserId(userId);\n    axios.post('http://localhost:7000/chat/', {\n      senderid: userIDs[0],\n      recieverid: userIDs[1]\n    }).then(res => {\n      console.log(res.data['_id']);\n      setChatId(res.data['_id']);\n    }).catch(err => {\n      console.log(err);\n    });\n    connectToNats(commonSubject);\n  };\n  const handleSendMessage = () => {\n    if (newMessage.trim() === '') {\n      return;\n    }\n    const userIDs = [currid, selectedUserId].sort();\n    const commonSubject = `chat.${userIDs[0]}.${userIDs[1]}`;\n    if (nc) {\n      const messageObject = {\n        text: newMessage,\n        sender: currid,\n        timestamp: new Date().toISOString(),\n        cid: chatid\n      };\n      nc.publish(commonSubject, sc.encode(JSON.stringify(messageObject)));\n      console.log(\"Sent Message:\", newMessage);\n    } else {\n      console.error(\"Not connected to NATS\");\n    }\n    setNewMessage('');\n  };\n  const handlelogout = () => {\n    localStorage.removeItem('userData');\n    navigate('/login');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"User List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Current user name \", ud ? ud['user']['username'] : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: usersData.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleUserClick(user._id),\n          children: user.username\n        }, user._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlelogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 3\n      }, this), selectedUserId ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [receivedMessages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: message.sender === currid ? \"sent-message\" : \"received-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: new Date(message.timestamp).toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 11\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 9\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value),\n            placeholder: \"Type your message...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSendMessage,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 5\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select a user to view messages.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatApp, \"E8jgj7rMwHA4QHaTzwAbIrHQ4XA=\", false, function () {\n  return [useNavigate];\n});\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","StringCodec","connect","axios","jsxDEV","_jsxDEV","ChatApp","_s","usersData","setUsersData","ud","setUd","navigate","currid","setCurrid","selectedUserId","setSelectedUserId","newMessage","setNewMessage","nc","setConnection","undefined","receivedMessages","setReceivedMessages","checkchat","setCheckchat","sc","chatid","setChatId","connectToNats","commonSubject","natsConnection","servers","console","log","subscription","subscribe","callback","err","msg","error","messageObject","JSON","parse","decode","data","prevMessages","unsubscribe","then","sud","localStorage","getItem","parseud","get","response","catch","fetchData","messages","map","text","sender","senderid","timestamp","createdAt","handleUserClick","userId","userIDs","sort","post","recieverid","res","handleSendMessage","trim","Date","toISOString","cid","publish","encode","stringify","handlelogout","removeItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","user","onClick","_id","username","message","index","toLocaleString","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Keus Automation/Downloads/keuschat/bingo/src/components/Chat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { StringCodec, connect } from 'nats.ws';\r\nimport axios from 'axios';\r\nimport './chatApp.css'\r\n\r\nconst ChatApp = () => {\r\n  const [usersData, setUsersData] = useState([]);\r\n  const [ud, setUd] = useState(null);\r\n  const navigate=useNavigate();\r\n  const [currid,setCurrid]=useState('')\r\n  const [selectedUserId, setSelectedUserId] = useState(null);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [nc, setConnection] = useState(undefined);\r\n  const [receivedMessages, setReceivedMessages] = useState([]);\r\n  const [checkchat, setCheckchat] = useState('');\r\n  const sc = StringCodec();\r\n  const [chatid,setChatId]=useState('')\r\n  const connectToNats = async (commonSubject) => {\r\n    try {\r\n      const natsConnection = await connect({\r\n        servers: \"http://localhost:9090\",\r\n        \r\n        \r\n      });\r\n      setConnection(natsConnection);\r\n      console.log(commonSubject)\r\n\r\n      const subscription = natsConnection.subscribe(commonSubject, {\r\n        callback: (err, msg) => {\r\n          if (err) {\r\n            console.error(err);\r\n          } else {\r\n            const messageObject = JSON.parse(sc.decode(msg.data));\r\n            console.log(\"Received message:\", messageObject);\r\n            \r\n            setReceivedMessages((prevMessages) => [...prevMessages, messageObject]);\r\n            console.log(subscription);\r\n          }\r\n        },\r\n      });\r\n      \r\n      \r\n      console.log(subscription);\r\n\r\n      return () => {\r\n        if (nc) {\r\n          nc.unsubscribe().then(() => {\r\n            console.log(\"Unsubscribed successfully\");\r\n          });\r\n        }\r\n      };\r\n    } catch (err) {\r\n    \r\n      console.error(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    const sud = localStorage.getItem('userData');\r\n    const parseud = JSON.parse(sud);\r\n    setUd(parseud);\r\n    \r\n    setCurrid(parseud['user']['_id'])\r\n\r\n    axios.get('http://localhost:7000/user')\r\n      .then((response) => {\r\n        setUsersData(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching users:', error);\r\n      });\r\n      const fetchData = async () => {\r\n        try {\r\n          const response = await axios.get(`http://localhost:7000/msg/${chatid}`);\r\n          const messages = response.data.map((msg) => ({\r\n            text: msg.text,\r\n            sender: msg.senderid, // Extracting sender ID from the response data\r\n            timestamp: msg.createdAt,\r\n          }));\r\n          console.log(messages)\r\n          setReceivedMessages(messages);\r\n        } catch (error) {\r\n          console.error('Error fetching messages:', error);\r\n        }\r\n      };\r\n  \r\n      fetchData();\r\n      }\r\n  , [nc]);\r\n\r\n  const handleUserClick =async (userId) => {\r\n    const userIDs = [currid, userId].sort(); \r\n    const commonSubject = `chat.${userIDs[0]}.${userIDs[1]}`;\r\n    setSelectedUserId(userId);\r\n    \r\n    axios.post('http://localhost:7000/chat/',{\r\n      senderid:userIDs[0],\r\n      recieverid:userIDs[1],\r\n    }).then((res)=>{\r\n      console.log(res.data['_id'])\r\n      setChatId(res.data['_id'])\r\n    }).catch((err)=>{\r\n      console.log(err)\r\n    })   \r\n   \r\n    connectToNats(commonSubject);\r\n    \r\n  };\r\n\r\n  const handleSendMessage = () => {\r\n    if (newMessage.trim() === '') {\r\n      return; \r\n    }\r\n  \r\n    const userIDs = [currid, selectedUserId].sort(); \r\n    const commonSubject = `chat.${userIDs[0]}.${userIDs[1]}`;\r\n  \r\n    if (nc) {\r\n      const messageObject = {\r\n        text: newMessage,\r\n        sender: currid,\r\n        timestamp: new Date().toISOString(),\r\n        cid:chatid\r\n      };\r\n  \r\n      nc.publish(commonSubject, sc.encode(JSON.stringify(messageObject)));\r\n      console.log(\"Sent Message:\", newMessage);\r\n    } else {\r\n      console.error(\"Not connected to NATS\");\r\n    }\r\n    setNewMessage('')\r\n  };\r\n\r\n  const handlelogout=()=>{\r\n    localStorage.removeItem('userData')\r\n    navigate('/login')\r\n  }\r\n  \r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"user-list\">\r\n        <h2>User List</h2>\r\n        <h2>Current user name {ud ? ud['user']['username'] : ''}</h2>\r\n        <ul>\r\n          {usersData.map((user) => (\r\n            <li key={user._id} onClick={() => handleUserClick(user._id)}>\r\n              {user.username}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div className=\"message-section\">\r\n      <button onClick={handlelogout}>Logout</button>\r\n\r\n  <h2>Messages</h2>\r\n  {selectedUserId ? (\r\n    <div>\r\n      {receivedMessages.map((message, index) => (\r\n        <div key={index} className={message.sender === currid ? \"sent-message\" : \"received-message\"}>\r\n          <p>{message.text}</p>\r\n          <small>{new Date(message.timestamp).toLocaleString()}</small>\r\n        </div>\r\n      ))}\r\n      <div className=\"message-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <p>Select a user to view messages.</p>\r\n  )}\r\n</div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatApp;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}